// vite.config.js
import path2 from "path";
import { defineConfig, loadEnv } from "file:///E:/code/manage-project/node_modules/vite/dist/node/index.js";
import Vue from "file:///E:/code/manage-project/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import Unocss from "file:///E:/code/manage-project/node_modules/unocss/dist/vite.mjs";
import AutoImport from "file:///E:/code/manage-project/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///E:/code/manage-project/node_modules/unplugin-vue-components/dist/vite.js";
import { NaiveUiResolver } from "file:///E:/code/manage-project/node_modules/unplugin-vue-components/dist/resolvers.js";
import simpleHtmlPlugin from "file:///E:/code/manage-project/node_modules/vite-plugin-simple-html/dist/index.js";

// build/index.js
import { globSync } from "file:///E:/code/manage-project/node_modules/glob/dist/esm/index.js";
import path from "path";

// src/assets/icons/dynamic-icons.js
var dynamic_icons_default = ["i-simple-icons:juejin"];

// build/index.js
function getIcons() {
  const feFiles = globSync("src/assets/icons/feather/*.svg", { nodir: true, strict: true });
  const meFiles = globSync("src/assets/icons/isme/*.svg", { nodir: true, strict: true });
  const feIcons = feFiles.map((filePath) => {
    const fileName = path.basename(filePath);
    const fileNameWithoutExt = path.parse(fileName).name;
    return `i-fe:${fileNameWithoutExt}`;
  });
  const meIcons = meFiles.map((filePath) => {
    const fileName = path.basename(filePath);
    const fileNameWithoutExt = path.parse(fileName).name;
    return `i-me:${fileNameWithoutExt}`;
  });
  return [...dynamic_icons_default, ...feIcons, ...meIcons];
}
function getPagePathes() {
  const files = globSync("src/views/**/*.vue");
  return files.map((item) => "/" + path.normalize(item).replace(/\\/g, "/"));
}

// build/plugin-isme/page-pathes.js
var PLUGIN_PAGE_PATHES_ID = "isme:page-pathes";
function pluginPagePathes() {
  return {
    name: "isme:page-pathes",
    resolveId(id) {
      if (id === PLUGIN_PAGE_PATHES_ID)
        return "\0" + PLUGIN_PAGE_PATHES_ID;
    },
    load(id) {
      if (id === "\0" + PLUGIN_PAGE_PATHES_ID) {
        return `export default ${JSON.stringify(getPagePathes())}`;
      }
    }
  };
}

// build/plugin-isme/icons.js
var PLUGIN_ICONS_ID = "isme:icons";
function pluginIcons() {
  return {
    name: "isme:icons",
    resolveId(id) {
      if (id === PLUGIN_ICONS_ID)
        return "\0" + PLUGIN_ICONS_ID;
    },
    load(id) {
      if (id === "\0" + PLUGIN_ICONS_ID) {
        return `export default ${JSON.stringify(getIcons())}`;
      }
    }
  };
}

// vite.config.js
var vite_config_default = defineConfig(({ command, mode }) => {
  const isBuild = command === "build";
  const viteEnv = loadEnv(mode, process.cwd());
  const { VITE_TITLE, VITE_PUBLIC_PATH, VITE_PROXY_TARGET } = viteEnv;
  return {
    base: VITE_PUBLIC_PATH || "/",
    plugins: [
      Vue(),
      Unocss(),
      AutoImport({
        imports: ["vue", "vue-router"],
        dts: false
      }),
      Components({
        resolvers: [NaiveUiResolver()],
        dts: false
      }),
      simpleHtmlPlugin({
        minify: isBuild,
        inject: {
          data: {
            title: VITE_TITLE
          }
        }
      }),
      // 自定义插件，用于生成页面文件的path，并添加到虚拟模块
      pluginPagePathes(),
      // 自定义插件，用于生成自定义icon，并添加到虚拟模块
      pluginIcons()
    ],
    resolve: {
      alias: {
        "@": path2.resolve(process.cwd(), "src"),
        "~": path2.resolve(process.cwd())
      }
    },
    server: {
      host: "0.0.0.0",
      port: 3200,
      open: false,
      proxy: {
        "/api": {
          target: VITE_PROXY_TARGET,
          changeOrigin: true,
          rewrite: (path3) => path3.replace(new RegExp("^/api"), ""),
          secure: false,
          configure: (proxy, options) => {
            proxy.on("proxyRes", (proxyRes, req) => {
              proxyRes.headers["x-real-url"] = new URL(req.url || "", options.target)?.href || "";
            });
          }
        }
      }
    },
    build: {
      chunkSizeWarningLimit: 1024
      // chunk 大小警告的限制（单位kb）
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
